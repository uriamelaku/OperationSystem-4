        -:    0:Source:graph.cpp
        -:    0:Graph:graph.gcno
        -:    0:Data:graph.gcda
        -:    0:Runs:1
        -:    1:#include "graph.hpp"
        -:    2:#include <algorithm>
        -:    3:#include <stdexcept>
        -:    4:#include <random>
        -:    5:#include <iostream>
        -:    6:#include <cstdlib> // for std::atoi
        -:    7:#include <unistd.h> // for getopt
        -:    8:
        -:    9:// Constructor
        1:   10:Graph::Graph(int vertices)
        3:   11:    : vertexCount(vertices), edgeCount(0), adjList(vertices) {}
        -:   12:
        -:   13:// Add an edge between vertex u and vertex v
       10:   14:void Graph::addEdge(int u, int v) {
       10:   15:    if (u >= vertexCount || v >= vertexCount || u < 0 || v < 0) {
    #####:   16:        throw std::out_of_range("Vertex index out of bounds");
        -:   17:    }
       10:   18:    adjList[u].push_back(v);
       10:   19:    adjList[v].push_back(u); // Since this is an undirected graph
       10:   20:    edgeCount++;
       10:   21:}
        -:   22:
        -:   23:// Get the total number of vertices in the graph
    #####:   24:int Graph::getVertexCount() const {
    #####:   25:    return vertexCount;
        -:   26:}
        -:   27:
        -:   28:// Get the total number of edges in the graph
       41:   29:int Graph::getEdgeCount() const {
       41:   30:    return edgeCount;
        -:   31:}
        -:   32:
        -:   33:// Check if there is an edge between vertex u and vertex v
       27:   34:bool Graph::hasEdge(int u, int v) const {
       27:   35:    if (u >= vertexCount || v >= vertexCount || u < 0 || v < 0) {
    #####:   36:        throw std::out_of_range("Vertex index out of bounds");
        -:   37:    }
       27:   38:    const auto &neighbors = adjList[u];
       27:   39:    return std::find(neighbors.begin(), neighbors.end(), v) != neighbors.end();
        -:   40:}
        -:   41:
        -:   42:// Check if the graph has an Eulerian cycle
        1:   43:bool Graph::hasEulerianCycle() const {
        1:   44:    if (!isConnected()) {
    #####:   45:        return false;
        -:   46:    }
        6:   47:    for (int v = 0; v < vertexCount; ++v) {
        5:   48:        if (degree(v) % 2 != 0) {
    #####:   49:            return false;
        -:   50:        }
        -:   51:    }
        1:   52:    return true;
        -:   53:}
        -:   54:
        -:   55:// Helper function to check if the graph is connected
        1:   56:bool Graph::isConnected() const {
        1:   57:    std::vector<bool> visited(vertexCount, false);
        1:   58:    int start = -1;
       1*:   59:    for (int i = 0; i < vertexCount; ++i) {
        1:   60:        if (!adjList[i].empty()) {
        1:   61:            start = i;
        1:   62:            break;
        -:   63:        }
        -:   64:    }
       1*:   65:    if (start == -1) return true;
        -:   66:
        2:   67:    std::vector<int> stack{start};
        1:   68:    visited[start] = true;
        6:   69:    while (!stack.empty()) {
        5:   70:        int v = stack.back();
        5:   71:        stack.pop_back();
       25:   72:        for (int neighbor : adjList[v]) {
       20:   73:            if (!visited[neighbor]) {
        4:   74:                visited[neighbor] = true;
        4:   75:                stack.push_back(neighbor);
        -:   76:            }
        -:   77:        }
        -:   78:    }
        -:   79:
        6:   80:    for (int i = 0; i < vertexCount; ++i) {
       5*:   81:        if (!adjList[i].empty() && !visited[i]) {
    #####:   82:            return false;
        -:   83:        }
        -:   84:    }
        1:   85:    return true;
        1:   86:}
        -:   87:
        -:   88:// Helper function to get the degree of a vertex
        5:   89:int Graph::degree(int v) const {
        5:   90:    return adjList[v].size();
        -:   91:}
        -:   92:
        -:   93:// Generate a random graph with a specified seed
        1:   94:Graph generateRandomGraph(int vertices, int edges, int seed) {
        1:   95:    Graph graph(vertices);
        1:   96:    std::mt19937 gen(seed);
        1:   97:    std::uniform_int_distribution<> dist(0, vertices - 1);
        -:   98:
       42:   99:    while (graph.getEdgeCount() < edges) {
       40:  100:        int u = dist(gen);
       40:  101:        int v = dist(gen);
       40:  102:        if (u != v && !graph.hasEdge(u, v)) {
       10:  103:            graph.addEdge(u, v);
        -:  104:        }
        -:  105:    }
        2:  106:    return graph;
    =====:  107:}
        -:  108:
        -:  109:// Main function to get input from the command line using getopt, generate the graph, and check for Eulerian cycle
        1:  110:int main(int argc, char* argv[]) {
        1:  111:    int vertices = 0;
        1:  112:    int edges = 0;
        1:  113:    int seed = 0;
        -:  114:
        -:  115:    int option;
        4:  116:    while ((option = getopt(argc, argv, "v:e:s:")) != -1) {
        3:  117:        switch (option) {
        1:  118:            case 'v':
        1:  119:                vertices = std::atoi(optarg);
        1:  120:                break;
        1:  121:            case 'e':
        1:  122:                edges = std::atoi(optarg);
        1:  123:                break;
        1:  124:            case 's':
        1:  125:                seed = std::atoi(optarg);
        1:  126:                break;
    #####:  127:            default:
    #####:  128:                std::cerr << "Usage: " << argv[0] << " -v <number of vertices> -e <number of edges> -s <seed>\n";
    #####:  129:                return 1;
        -:  130:        }
        -:  131:    }
        -:  132:
        1:  133:    if (vertices <= 0 || edges < 0) {
    #####:  134:        std::cerr << "The number of vertices must be positive, and the number of edges must be 0 or more.\n";
    #####:  135:        return 1;
        -:  136:    }
        -:  137:
        1:  138:    Graph graph = generateRandomGraph(vertices, edges, seed);
        1:  139:    std::cout << "Random graph generated with " << vertices << " vertices and " << edges << " edges, seed: " << seed << ".\n";
        -:  140:
        1:  141:    if (graph.hasEulerianCycle()) {
        1:  142:        std::cout << "The graph has an Eulerian cycle.\n";
        -:  143:    } else {
    #####:  144:        std::cout << "The graph does not have an Eulerian cycle.\n";
        -:  145:    }
        -:  146:
        1:  147:    return 0;
        -:  148:}
